use clap::{App, AppSettings, Arg};

#[must_use]
pub fn build() -> App<'static, 'static> {
    App::new("Network Stalker")
        .version(env!("CARGO_PKG_VERSION"))
        .author(env!("CARGO_PKG_AUTHORS"))
        .about(env!("CARGO_PKG_DESCRIPTION"))
        .global_setting(AppSettings::ColoredHelp)
        .arg(Arg::with_name("MQTT Server")
            .short("h")
            .long("host")
            .value_name("HOST")
            .takes_value(true)
            .help("Host on which the MQTT Broker is running")
            .default_value("localhost")
        )
        .arg(Arg::with_name("MQTT Port")
            .short("p")
            .long("port")
            .value_name("INT")
            .takes_value(true)
            .help("Port on which the MQTT Broker is running")
            .default_value("1883")
        )
        .arg(Arg::with_name("MQTT Base Topic")
            .short("t")
            .long("base-topic")
            .value_name("STRING")
            .takes_value(true)
            .help("MQTT Root Topic to publish to")
            .default_value("network-stalker")
        )
        .arg(Arg::with_name("MQTT QoS")
            .short("q")
            .long("qos")
            .value_name("INT")
            .takes_value(true)
            .help("Define the Quality of Service for the MQTT Messages (0, 1 or 2)")
            .default_value("2")
        )
        .arg(Arg::with_name("MQTT Retain")
            .short("r")
            .long("retain")
            .help("Publish MQTT Messages with the retain flag")
        )
        .arg(Arg::with_name("verbose")
            .short("v")
            .long("verbose")
            .help("Show network check results on stdout")
        )
        .arg(Arg::with_name("hostnames")
            .multiple(true)
            .min_values(1)
            .required(true)
            .help("Hostnames to be checked for being reachable like '192.168.178.1' or 'fritz.box'")
        )
}
