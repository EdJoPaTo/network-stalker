use clap::{command, Arg, Command, ValueHint};

#[allow(clippy::too_many_lines)]
#[must_use]
pub fn build() -> Command<'static> {
    command!()
        .name("Network Stalker")
        .arg(Arg::new("MQTT Server")
            .short('h')
            .long("host")
            .env("MQTT_BROKER")
            .value_hint(ValueHint::Hostname)
            .value_name("HOST")
            .takes_value(true)
            .help("Host on which the MQTT Broker is running")
            .default_value("localhost")
        )
        .arg(Arg::new("MQTT Port")
            .short('p')
            .long("port")
            .env("MQTT_PORT")
            .value_hint(ValueHint::Other)
            .value_name("INT")
            .takes_value(true)
            .validator(|s| s.parse::<u16>())
            .help("Port on which the MQTT Broker is running")
            .default_value("1883")
        )
        .arg(Arg::new("MQTT Base Topic")
            .short('t')
            .long("base-topic")
            .env("MQTT_BASE_TOPIC")
            .value_hint(ValueHint::Other)
            .value_name("STRING")
            .takes_value(true)
            .help("MQTT Root Topic to publish to")
            .default_value("network-stalker")
        )
        .arg(Arg::new("MQTT QoS")
            .short('q')
            .long("qos")
            .env("MQTT_QOS")
            .value_hint(ValueHint::Other)
            .value_name("INT")
            .possible_values(["0", "1", "2"])
            .takes_value(true)
            .help("Define the Quality of Service for the MQTT Messages")
            .default_value("2")
        )
        .arg(Arg::new("MQTT Retain")
            .short('r')
            .long("retain")
            .env("MQTT_RETAIN")
            .help("Publish MQTT Messages with the retain flag")
        )
        .arg(Arg::new("verbose")
            .short('v')
            .long("verbose")
            .help("Show network check results on stdout")
        )
        .arg(Arg::new("hostnames")
            .value_hint(ValueHint::Hostname)
            .value_name("HOST")
            .multiple_values(true)
            .min_values(1)
            .required(true)
            .help("Hostnames to be checked for being reachable like '192.168.178.1' or 'fritz.box'")
        )
}

#[test]
fn verify() {
    build().debug_assert();
}
